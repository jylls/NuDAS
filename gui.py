# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NuDAS.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QFileDialog, QSizePolicy, QTableWidget, QTableWidgetItem
from NuDAS import NuDAS

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt

import random


class Ui_MainWindow(object):
    # gui+
    def __init__(self):
        self.nudas = NuDAS()
        self.stimulus_file_path = ""
        self.spike_times_file_path = ""

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(2000, 1500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listWidgetSpikes = QtWidgets.QListWidget(self.centralwidget)
        self.listWidgetSpikes.setEnabled(False)
        self.listWidgetSpikes.setGeometry(QtCore.QRect(10, 10, 401, 491))
        self.listWidgetSpikes.setObjectName("listWidgetSpikes")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 2000, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpenStimulus = QtWidgets.QAction(MainWindow)
        self.actionOpenStimulus.setObjectName("actionOpenStimulus")
        self.actionOpenSpikes = QtWidgets.QAction(MainWindow)
        self.actionOpenSpikes.setObjectName("actionOpenSpikes")
        self.actionBinning = QtWidgets.QAction(MainWindow)
        self.actionBinning.setObjectName("actionBinning")
        self.actionZ_Score = QtWidgets.QAction(MainWindow)
        self.actionZ_Score.setObjectName("actionZ_Score")
        self.menuFile.addAction(self.actionOpenStimulus)
        self.menuFile.addAction(self.actionOpenSpikes)
        self.menuTools.addAction(self.actionBinning)
        self.menuTools.addAction(self.actionZ_Score)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # gui+
        # File connections
        self.actionOpenStimulus.triggered. \
            connect(lambda: self.open_file_dialog("Open Stimulus File", "Image Files (*.mat)", 0))
        self.actionOpenSpikes.triggered. \
            connect(lambda: self.open_file_dialog("Open Action Potential File", "Image Files (*.mat)", 1))

        # Tools connections
        self.actionBinning.triggered. \
            connect(lambda: self.bin_data())

        self.actionZ_Score.triggered. \
            connect(lambda: self.nudas.z_scoring())

        # Graph UI elements
        # m = PlotCanvas(self.centralwidget, width=5, height=4)
        # m.move(0, 0)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.actionOpenStimulus.setText(_translate("MainWindow", "Open Stimulus File"))
        self.actionOpenStimulus.setStatusTip(
            _translate("MainWindow", "Imports and displays the .mat file containing the trigger stimulus data."))
        self.actionOpenSpikes.setText(_translate("MainWindow", "Open Spikes File"))
        self.actionBinning.setText(_translate("MainWindow", "Binning"))
        self.actionZ_Score.setText(_translate("MainWindow", "Z-Score"))

    # gui+
    def open_file_dialog(self, c, f, dialog_type):
        if dialog_type == 0:
            self.stimulus_file_path, x = QFileDialog.getOpenFileName(self.centralwidget,
                                                                     c,
                                                                     "/home",
                                                                     f)
            # print(self.stimulus_file_path)
            self.nudas.load_stimulus(self.stimulus_file_path)
        elif dialog_type == 1:
            self.spike_times_file_path, x = QFileDialog.getOpenFileName(self.centralwidget,
                                                                        c,
                                                                        "/home",
                                                                        f)
            # print(self.spike_times_file_path)
            self.nudas.load_spike_times(self.spike_times_file_path)
            self.listWidgetSpikes.setEnabled(True)

    # gui+
    # c is for comb. it's like some kind of matplotlib backend for embedding graphs
    def bin_data(self, c=0):
        if self.stimulus_file_path == "" or self.spike_times_file_path == "":
            msg = "First, you must load the stimulus and action potential data (which can be accessed under the " + \
                  "File menu) to bin any data"
            msg_box = QMessageBox()
            msg_box.setIcon(QMessageBox.Information)
            msg_box.setText(msg)
            msg_box.exec_()
        else:
            # TODO tw or time_window will have to be a user specified value from the GUI
            # we also likely require input for which neuron you would like to do binning on and which stimulus
            # trial we are currently using
            stimulus_trial_idx = 0
            neuron_idx = 0
            tw = 1
            dmr = 1
            bin_window = tw * 0.001
            # neural_data_path = np.load('./neural_data_path.npy', allow_pickle=True)
            # neural_data_path = str(neural_data_path)
            # print('path:::' + neural_data_path)

            self.nudas.bin_spike_matrix(neuron_idx, 1000, False)

            # Graph UI elements
            # m = PlotCanvas(self.centralwidget, width=5, height=4)
            # m.move(0, 0)

            # ALL OF THIS BELOW HERE IS PLOTTING THE RESULT FROM spike_matrix
            # # fig = Figure(figsize = (5, 5),dpi = 100)
            # c = comb[1]
            # fig = comb[0]
            # plot1 = fig.add_subplot(111)
            # plt.title('Density plot (time window=' + str(tw) + ' ms')
            # plot1.clear()
            # plot1.imshow(spt_mat, origin='lower left', aspect='auto', interpolation=None, cmap='cividis')
            # # canvas = FigureCanvasTkAgg(fig,master = root,tag={'cvs'})
            # c.draw()
            # # placing the canvas on the Tkinter window
            # c.get_tk_widget().pack()
            # # canvas.delete('all')
            # np.save('spike_matrix.npy', spt_mat)

# gui+
class PlotCanvas(FigureCanvas):
    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)

        FigureCanvas.__init__(self, fig)
        self.setParent(parent)

        FigureCanvas.setSizePolicy(self, QSizePolicy.Expanding, QSizePolicy.Expanding)
        FigureCanvas.updateGeometry(self)
        self.plot()

    def plot(self):
        data = [random.random() for i in range(25)]
        ax = self.figure.add_subplot(111)
        ax.plot(data, 'r-')
        ax.set_title('PyQt Matplotlib Example')
        self.draw()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
